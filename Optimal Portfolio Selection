!pip install yfinance
import numpy as np
import yfinance as yf

# Fetch stock data from Yahoo Finance
tickers = [
    "AAPL", "TSLA", "GOOG", "BTC-USD", "META", "NVDA", "QCOM", "JNJ", "CVS", "GS",
    "JPM", "PYPL", "AMZN", "EBAY", "MCD", "NKE", "ETSY", "MSFT", "AMD", "INTC", "CSCO",
    "ORCL", "SPOT", "V", "CRM", "NFLX", "DIS", "KO", "PFE", "WMT", "BABA", "BA", "GE",
    "XOM", "CVX", "MRK", "T", "VZ", "BMY", "UNH", "MA", "IBM", "LVMUY", "AXP", "MS", "BIDU",
    "SPGI", "COST", "AIG", "COP", "LMT", "ADBE", "F", "ABT", "DE", "RTX", "SYK", "CAT", "TMO",
    "AMT", "TGT", "WFC", "PG", "KHC", "PEP", "DOW", "SPY", "COF", "ADP", "TRV", "UAL", "ALGN",
    "WBA", "CHTR", "CI", "NTAP", "CSX", "SNAP", "VLO", "SLB", "DUK", "SBUX", "LYB", "NEM", "BKR",
    "NEE", "REGN", "SYY", "STT", "VFC", "KMB", "MMM", "KLAC", "STZ", "DXCM", "HSY", "HRL",
    "MU", "AMAT", "TSCO", "BAX", "MCK", "LLY", "HCA", "ACN", "NSC", "DHR", "HPE", "MDT", "AVGO",
    "HUM", "FDX", "GIS", "MO", "EXPE", "GM", "PNC", "ZTS", "LMT", "UPS", "EXC", "TXN",
    "C", "RCL", "AON", "CMG", "LUV", "HPQ", "ISRG", "HON", "NEE"
]


data = yf.download(tickers, start="2023-10-01", end="2025-04-02", interval="1d")["Close"]

# Compute log returns
log_returns = np.log(data / data.shift(1))

# Calculate expected return and standard deviation for a given time period
ER = log_returns.mean() * 30  # 1.5 month E(R), 30 trading days
SD = log_returns.std() * np.sqrt(30)  # 1.5 month SD, 30 trading days

# Convert to numpy arrays
returns = ER.to_numpy()
SD = SD.to_numpy()

n = len(returns)
max_risk = 0.6  # Maximum allowable risk (standard deviation)
min_stocks = 4  # Minimum number of stocks to select

# Initialise the DP table dimensions: stocks, & risk
dp_table = np.zeros((n + 1, int(max_risk * 100) + 1))  # DP table for risk

# Fill the DP table
for i in range(1, n + 1):
    for r in range(int(max_risk * 100) + 1):  # Risk * 100, r for risk

        # Check if including this stock is within the risk tolerance
        if SD[i - 1] * 100 <= r:
            dp_table[i][r] = max(dp_table[i - 1][r], dp_table[i - 1][r - int(SD[i - 1] * 100)] + returns[i - 1])
        else:
            dp_table[i][r] = dp_table[i - 1][r]

# Backtrack to find the selected stocks
selected_stocks = []
r = int(max_risk * 100)  # Start from max risk

# Ensure it's within limits during iteration
for i in range(n, 0, -1):
    if r < 0:  # Prevents limit being exceeded
        break
    if dp_table[i][r] != dp_table[i - 1][r]:  # Stock was selected
        selected_stocks.append(tickers[i - 1])  # Use ticker list for stocks
        r -= int(SD[i - 1] * 100)  # Decrease risk by stock's risk

# If there is no match based on restrictions
if len(selected_stocks) < min_stocks:
    print("\nNot enough stocks selected. Reduce Constraints")

else:
    # Print results
    print("\nOptimal Portfolio Selection:", selected_stocks)
    print("Total Expected Return:", dp_table[n][int(max_risk * 100)])
    print("Total Risk:", max_risk)
